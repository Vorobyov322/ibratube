import os
import time

import yt_dlp
import asyncio
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardMarkup, 
    InlineKeyboardButton, 
    ReplyKeyboardMarkup,
    KeyboardButton,
    FSInputFile
)
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è aiogram 3.10+
from aiogram.exceptions import TelegramAPIError, TelegramRetryAfter
from dotenv import load_dotenv

load_dotenv()
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = os.getenv('BOT_TOKEN')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ
DOWNLOADS_DIR = 'downloads'
MAX_CONCURRENT_DOWNLOADS = 5
os.makedirs(DOWNLOADS_DIR, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class DownloadStates(StatesGroup):
    main_menu = State()        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    waiting_for_url = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏
    downloading = State()      # –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏

def get_main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üé• –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ"),
                KeyboardButton(text="üéµ –°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ")
            ],
            [
                KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
                KeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞")
            ]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )

def is_youtube_url(url):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ YouTube-—Å—Å—ã–ª–∫–æ–π"""
    if not url:
        return False
    youtube_domains = ['youtube.com', 'youtu.be', 'www.youtube.com']
    return any(domain in url.lower() for domain in youtube_domains)

@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await state.clear()
    await state.set_state(DownloadStates.main_menu)
    
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ YouTube Downloader!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
        reply_markup=get_main_menu()
    )

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def show_help(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    await message.answer(
        "‚ÑπÔ∏è <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ' –∏–ª–∏ '–°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ'\n"
        "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ\n"
        "3. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ñ–∞–π–ª\n\n"
        "‚ö†Ô∏è <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>\n"
        "- –ú–∞–∫—Å. –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: 1 —á–∞—Å\n"
        "- –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 1.9 –ì–ë\n"
        "- –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –≤–∏–¥–µ–æ",
        parse_mode="HTML",
        reply_markup=get_main_menu()
    )

@router.message(F.text == "üö´ –û—Ç–º–µ–Ω–∞")
async def cancel_process(message: types.Message, state: FSMContext):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer(
            "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã",
            reply_markup=get_main_menu()
        )
        return
    
    await state.clear()
    await state.set_state(DownloadStates.main_menu)
    
    await message.answer(
        "‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
        reply_markup=get_main_menu()
    )

@router.message(F.text == "üé• –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ")
async def download_video(message: types.Message, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ"""
    await state.set_state(DownloadStates.waiting_for_url)
    await state.update_data(download_type="video")
    
    await message.answer(
        "üìå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ\n\n",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )

@router.message(F.text == "üéµ –°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ")
async def download_audio(message: types.Message, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –∞—É–¥–∏–æ"""
    await state.set_state(DownloadStates.waiting_for_url)
    await state.update_data(download_type="audio")
    
    await message.answer(
        "üìå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ\n\n",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )

@router.message(DownloadStates.waiting_for_url, F.text)
async def process_url(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    url = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
    if url == "üö´ –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await state.set_state(DownloadStates.main_menu)
        await message.answer(
            "‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
            reply_markup=get_main_menu()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ YouTube-—Å—Å—ã–ª–∫–∏
    if not is_youtube_url(url):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ.\n"
            "–ü—Ä–∏–º–µ—Ä: https://www.youtube.com/watch?v=dQw4w9WgXcQ",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞")]],
                resize_keyboard=True
            )
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    current_state = await state.get_state()
    if current_state == DownloadStates.downloading.state:
        await message.answer(
            "‚ùó –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞")]],
                resize_keyboard=True
            )
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ
    await state.set_state(DownloadStates.downloading)
    data = await state.get_data()
    format_type = data.get('download_type', 'video')
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    user_id = message.from_user.id
    timestamp = int(time.time())
    output_template = f"{DOWNLOADS_DIR}/{user_id}_{timestamp}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    try:
        status_msg = await bot.send_message(
            user_id, 
            f"‚è≥ –ó–∞–≥—Ä—É–∂–∞—é {format_type}... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
        )
        await state.update_data(status_msg_id=status_msg.message_id)
    except Exception as e:
        await state.clear()
        await state.set_state(DownloadStates.main_menu)
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É: {str(e)[:100]}",
            reply_markup=get_main_menu()
        )
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ yt-dlp
    ydl_opts = {
        'outtmpl': f'{output_template}.%(ext)s',
        'noplaylist': True,
        'quiet': True,
        'no_warnings': True,
        'restrictfilenames': True,
        'format': 'bestvideo+bestaudio/best' if format_type == 'video' else 'bestaudio/best',
        'socket_timeout': 15,
        'retries': 3,
    }
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞—É–¥–∏–æ
    if format_type == 'audio':
        ydl_opts.update({
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
                'preferredquality': '192',
            }],
        })
    
    file_path = None
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
        with yt_dlp.YoutubeDL({'quiet': True}) as ydl:
            try:
                info = ydl.extract_info(url, download=False)
                title = info.get('title', 'download')
                duration = info.get('duration', 0)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –≤–∏–¥–µ–æ
                if duration > 3600:  # 1 —á–∞—Å
                    raise Exception("–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–±–æ–ª–µ–µ 1 —á–∞—Å–∞)")
            except Exception as e:
                raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {str(e)[:100]}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        if format_type == 'audio':
            file_path = f"{output_template}.mp3"
        else:
            for ext in ['mp4', 'mkv', 'webm']:
                potential_path = f"{output_template}.{ext}"
                if os.path.exists(potential_path):
                    file_path = potential_path
                    break
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        if not file_path or not os.path.exists(file_path):
            raise Exception("–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
        file_size = os.path.getsize(file_path)
        if file_size > 1.9 * 1024 * 1024 * 1024:  # 1.9 –ì–ë
            raise Exception("–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram (–±–æ–ª–µ–µ 1.9 –ì–ë)")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        await asyncio.sleep(1)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        try:
            if format_type == 'audio':
                await bot.send_audio(
                    user_id, 
                    FSInputFile(file_path), 
                    caption=f"üéß {title[:90]}..." if len(title) > 90 else f"üéß {title}",
                    timeout=60
                )
            else:
                await bot.send_video(
                    user_id, 
                    FSInputFile(file_path), 
                    caption=f"üé¨ {title[:90]}..." if len(title) > 90 else f"üé¨ {title}",
                    timeout=120
                )
        except TelegramRetryAfter as e:  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
            await asyncio.sleep(e.retry_after)
            if format_type == 'audio':
                await bot.send_audio(user_id, FSInputFile(file_path), caption=f"üéß {title}")
            else:
                await bot.send_video(user_id, FSInputFile(file_path), caption=f"üé¨ {title}")
        except TelegramAPIError as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)[:100]}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await bot.edit_message_text(
            chat_id=user_id,
            message_id=status_msg.message_id,
            text=f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\nüìå {title[:50]}{'...' if len(title) > 50 else ''}"
        )
    
    except Exception as e:
        error_msg = str(e)[:200]
        try:
            data = await state.get_data()
            status_msg_id = data.get('status_msg_id')
            
            if status_msg_id:
                await bot.edit_message_text(
                    chat_id=user_id,
                    message_id=status_msg_id,
                    text=f"‚ùå –û—à–∏–±–∫–∞: {error_msg}"
                )
            else:
                await bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {error_msg}")
        except:
            try:
                await bot.send_message(user_id, f"‚ùå –û—à–∏–±–∫–∞: {error_msg}")
            except:
                pass
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        await state.clear()
        await state.set_state(DownloadStates.main_menu)
        
        if file_path and os.path.exists(file_path):
            try:
                os.remove(file_path)
            except:
                pass

@router.message(DownloadStates.main_menu, F.text)
async def main_menu_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    await message.answer(
        "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
        reply_markup=get_main_menu()
    )

@router.message()
async def fallback_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    current_state = await state.get_state()
    
    if current_state == DownloadStates.waiting_for_url.state:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é YouTube-—Å—Å—ã–ª–∫—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∞")]],
                resize_keyboard=True
            )
        )
    else:
        await state.clear()
        await state.set_state(DownloadStates.main_menu)
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ YouTube Downloader!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
            reply_markup=get_main_menu()
        )

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
    await dp.start_polling(
        bot,
        skip_updates=True,
        allowed_updates=dp.resolve_used_update_types(),
        polling_timeout=10
    )

if __name__ == "__main__":
    asyncio.run(main())
